pipeline {
    agent any

    stages {
        stage('Repository') {
            steps {
                git branch: 'dev', url: "https://github.com/KEA-4th-Bootstrap/moldev-frontend-client"
            }
        }

        stage('Build') {
            steps {
                withCredentials([file(credentialsId: 'front-env', variable: 'front')]) {
                    sh """
                            cp -f ${front} .env
                            cat .env
                    """
                }
            }
            post {
                  always {
                         jiraSendBuildInfo site: 'kea4bootstrap.atlassian.net'
                  }
            }
        }

        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'kakao-jenkins-token', passwordVariable: 'PASSWORD_KEY', usernameVariable: 'USER_KEY')]) {
                    sh "docker login gcu-bootstrap-dev.kr-central-2.kcr.dev --username ${USER_KEY} --password ${PASSWORD_KEY}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                withCredentials([
                    string(credentialsId: 'docker-hub-name', variable: 'DOCKER_NAME'),
                    string(credentialsId: 'docker-file-frontend', variable: 'DOCKER_FILE')
                ]) {
                    sh "docker build -t ${DOCKER_NAME}/${DOCKER_FILE}:${currentBuild.number} . "
                    sh "docker tag ${DOCKER_NAME}/${DOCKER_FILE}:${currentBuild.number} gcu-bootstrap-dev.kr-central-2.kcr.dev/moldev-repository/${DOCKER_FILE}:${currentBuild.number}"
                }
            }

        }

        stage('Push Docker Image') {
            steps {
                withCredentials([
                    string(credentialsId: 'docker-file-frontend', variable: 'DOCKER_FILE')
                ]) {
                    sh "docker push gcu-bootstrap-dev.kr-central-2.kcr.dev/moldev-repository/${DOCKER_FILE}:${currentBuild.number}"
                }
            }
        }

        stage("Clone Manifest Git Repository") {
            steps {
                git(
                    url: 'https://github.com/KEA-4th-Bootstrap/moldev-kubernetes-manifest',
                    branch: "main",
                    changelog: true,
                    poll: true
                )
            }
        }

        stage("Update Manifest version changes") {
            steps {
                withCredentials([
                    string(credentialsId: 'docker-hub-name', variable: 'DOCKER_NAME'),
                    string(credentialsId: 'docker-file-frontend', variable: 'DOCKER_FILE')
                ]) {
                    sh """
                        cd frontend
                        sed -i 's|gcu-bootstrap-dev.kr-central-2.kcr.dev/moldev-repository/.*|gcu-bootstrap-dev.kr-central-2.kcr.dev/moldev-repository/${DOCKER_FILE}:${currentBuild.number}|' deployment.yaml
                        git add deployment.yaml
                        git commit -m '[UPDATE] manifest ${currentBuild.number} image versioning'
                    """
                }
            }
        }

        stage("Push to Git Repository") {
            steps {
                withCredentials([gitUsernamePassword(credentialsId: 'git-jenkins-manifest', gitToolName: 'Default')]) {
                    sh "git push -u origin main"
                }
                sh 'docker rmi -f $(docker images -aq)'
                sh 'docker system prune -f'
            }
        }
    }

    post {
        success {
            slackSend (
                channel: '#bootstrap-jenkins', 
                color: '#00FF00', 
                message: """
                    SUCCESS: Job ${env.JOB_NAME} [${env.BUILD_NUMBER}]
                """
            )
        }
        failure {
            slackSend (
                channel: '#bootstrap-jenkins', 
                color: '#FF0000', 
                message: "FAIL: Job ${env.JOB_NAME} [${env.BUILD_NUMBER}]"
            )
        }
    }
}
